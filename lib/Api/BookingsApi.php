<?php
/**
 * BookingsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Katanox
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Katanox API Documentation
 *
 * The Katanox API allows any travel seller to search and book accommodation.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Katanox\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Katanox\ApiException;
use Katanox\Configuration;
use Katanox\HeaderSelector;
use Katanox\ObjectSerializer;

/**
 * BookingsApi Class Doc Comment
 *
 * @category Class
 * @package  Katanox
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BookingsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'cancelBookingById' => [
            'application/json',
        ],
        'cancelReservation' => [
            'application/json',
        ],
        'createBooking' => [
            'application/json',
        ],
        'createReservation' => [
            'application/json',
        ],
        'getBookingById' => [
            'application/json',
        ],
        'getReservationById' => [
            'application/json',
        ],
        'updateReservation' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelBookingById
     *
     * Cancel a booking
     *
     * @param  string $booking_id The id of the booking to be cancelled (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelBookingById'] to see the possible values for this operation
     *
     * @throws \Katanox\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelBookingById($booking_id, $authorization, string $contentType = self::contentTypes['cancelBookingById'][0])
    {
        $this->cancelBookingByIdWithHttpInfo($booking_id, $authorization, $contentType);
    }

    /**
     * Operation cancelBookingByIdWithHttpInfo
     *
     * Cancel a booking
     *
     * @param  string $booking_id The id of the booking to be cancelled (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelBookingById'] to see the possible values for this operation
     *
     * @throws \Katanox\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelBookingByIdWithHttpInfo($booking_id, $authorization, string $contentType = self::contentTypes['cancelBookingById'][0])
    {
        $request = $this->cancelBookingByIdRequest($booking_id, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelInternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelBookingByIdAsync
     *
     * Cancel a booking
     *
     * @param  string $booking_id The id of the booking to be cancelled (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelBookingById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelBookingByIdAsync($booking_id, $authorization, string $contentType = self::contentTypes['cancelBookingById'][0])
    {
        return $this->cancelBookingByIdAsyncWithHttpInfo($booking_id, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelBookingByIdAsyncWithHttpInfo
     *
     * Cancel a booking
     *
     * @param  string $booking_id The id of the booking to be cancelled (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelBookingById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelBookingByIdAsyncWithHttpInfo($booking_id, $authorization, string $contentType = self::contentTypes['cancelBookingById'][0])
    {
        $returnType = '';
        $request = $this->cancelBookingByIdRequest($booking_id, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelBookingById'
     *
     * @param  string $booking_id The id of the booking to be cancelled (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelBookingById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelBookingByIdRequest($booking_id, $authorization, string $contentType = self::contentTypes['cancelBookingById'][0])
    {

        // verify the required parameter 'booking_id' is set
        if ($booking_id === null || (is_array($booking_id) && count($booking_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $booking_id when calling cancelBookingById'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling cancelBookingById'
            );
        }


        $resourcePath = '/bookings/{booking_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($booking_id !== null) {
            $resourcePath = str_replace(
                '{' . 'booking_id' . '}',
                ObjectSerializer::toPathValue($booking_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelReservation
     *
     * Cancel a reservation
     *
     * @param  string $booking_id The id of the booking (required)
     * @param  string $reservation_id The id of the reservation (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelReservation'] to see the possible values for this operation
     *
     * @throws \Katanox\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelReservation($booking_id, $reservation_id, $authorization, string $contentType = self::contentTypes['cancelReservation'][0])
    {
        $this->cancelReservationWithHttpInfo($booking_id, $reservation_id, $authorization, $contentType);
    }

    /**
     * Operation cancelReservationWithHttpInfo
     *
     * Cancel a reservation
     *
     * @param  string $booking_id The id of the booking (required)
     * @param  string $reservation_id The id of the reservation (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelReservation'] to see the possible values for this operation
     *
     * @throws \Katanox\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelReservationWithHttpInfo($booking_id, $reservation_id, $authorization, string $contentType = self::contentTypes['cancelReservation'][0])
    {
        $request = $this->cancelReservationRequest($booking_id, $reservation_id, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelInternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelReservationAsync
     *
     * Cancel a reservation
     *
     * @param  string $booking_id The id of the booking (required)
     * @param  string $reservation_id The id of the reservation (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelReservation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelReservationAsync($booking_id, $reservation_id, $authorization, string $contentType = self::contentTypes['cancelReservation'][0])
    {
        return $this->cancelReservationAsyncWithHttpInfo($booking_id, $reservation_id, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelReservationAsyncWithHttpInfo
     *
     * Cancel a reservation
     *
     * @param  string $booking_id The id of the booking (required)
     * @param  string $reservation_id The id of the reservation (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelReservation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelReservationAsyncWithHttpInfo($booking_id, $reservation_id, $authorization, string $contentType = self::contentTypes['cancelReservation'][0])
    {
        $returnType = '';
        $request = $this->cancelReservationRequest($booking_id, $reservation_id, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelReservation'
     *
     * @param  string $booking_id The id of the booking (required)
     * @param  string $reservation_id The id of the reservation (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelReservation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelReservationRequest($booking_id, $reservation_id, $authorization, string $contentType = self::contentTypes['cancelReservation'][0])
    {

        // verify the required parameter 'booking_id' is set
        if ($booking_id === null || (is_array($booking_id) && count($booking_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $booking_id when calling cancelReservation'
            );
        }

        // verify the required parameter 'reservation_id' is set
        if ($reservation_id === null || (is_array($reservation_id) && count($reservation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reservation_id when calling cancelReservation'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling cancelReservation'
            );
        }


        $resourcePath = '/bookings/{booking_id}/reservations/{reservation_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($booking_id !== null) {
            $resourcePath = str_replace(
                '{' . 'booking_id' . '}',
                ObjectSerializer::toPathValue($booking_id),
                $resourcePath
            );
        }
        // path params
        if ($reservation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'reservation_id' . '}',
                ObjectSerializer::toPathValue($reservation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBooking
     *
     * Create a booking
     *
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  \Katanox\Model\HttpBookingCreationRequest $booking Booking body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBooking'] to see the possible values for this operation
     *
     * @throws \Katanox\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Katanox\Model\HttpBookingResponse|\Katanox\Model\ModelApiError|\Katanox\Model\ModelApiError|\Katanox\Model\ModelInternalServerError
     */
    public function createBooking($authorization, $booking, string $contentType = self::contentTypes['createBooking'][0])
    {
        list($response) = $this->createBookingWithHttpInfo($authorization, $booking, $contentType);
        return $response;
    }

    /**
     * Operation createBookingWithHttpInfo
     *
     * Create a booking
     *
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  \Katanox\Model\HttpBookingCreationRequest $booking Booking body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBooking'] to see the possible values for this operation
     *
     * @throws \Katanox\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Katanox\Model\HttpBookingResponse|\Katanox\Model\ModelApiError|\Katanox\Model\ModelApiError|\Katanox\Model\ModelInternalServerError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBookingWithHttpInfo($authorization, $booking, string $contentType = self::contentTypes['createBooking'][0])
    {
        $request = $this->createBookingRequest($authorization, $booking, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Katanox\Model\HttpBookingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\HttpBookingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\HttpBookingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Katanox\Model\ModelApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Katanox\Model\ModelApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Katanox\Model\ModelInternalServerError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelInternalServerError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelInternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Katanox\Model\HttpBookingResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\HttpBookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelInternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBookingAsync
     *
     * Create a booking
     *
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  \Katanox\Model\HttpBookingCreationRequest $booking Booking body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBooking'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBookingAsync($authorization, $booking, string $contentType = self::contentTypes['createBooking'][0])
    {
        return $this->createBookingAsyncWithHttpInfo($authorization, $booking, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBookingAsyncWithHttpInfo
     *
     * Create a booking
     *
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  \Katanox\Model\HttpBookingCreationRequest $booking Booking body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBooking'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBookingAsyncWithHttpInfo($authorization, $booking, string $contentType = self::contentTypes['createBooking'][0])
    {
        $returnType = '\Katanox\Model\HttpBookingResponse';
        $request = $this->createBookingRequest($authorization, $booking, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBooking'
     *
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  \Katanox\Model\HttpBookingCreationRequest $booking Booking body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBooking'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createBookingRequest($authorization, $booking, string $contentType = self::contentTypes['createBooking'][0])
    {

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling createBooking'
            );
        }

        // verify the required parameter 'booking' is set
        if ($booking === null || (is_array($booking) && count($booking) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $booking when calling createBooking'
            );
        }


        $resourcePath = '/bookings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($booking)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($booking));
            } else {
                $httpBody = $booking;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createReservation
     *
     * Create a reservation
     *
     * This operation contains host(s) defined in the OpenAPI spec. Use 'hostIndex' to select the host.
     * if needed, use the 'variables' parameter to pass variables to the host.
     * URL: https://api.datatrans.com/upp/services/v1/inline/token
     *
     * @param  string $booking_id The id of the booking (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  \Katanox\Model\HttpReservationCreationRequest $reservation Reservation body (required)
     * @param  null|int $hostIndex Host index. Defaults to null. If null, then the library will use $this->hostIndex instead
     * @param  array $variables Associative array of variables to pass to the host. Defaults to empty array.
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReservation'] to see the possible values for this operation
     *
     * @throws \Katanox\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Katanox\Model\HttpReservationResponse|\Katanox\Model\ModelApiError|\Katanox\Model\ModelApiError|\Katanox\Model\ModelApiError|\Katanox\Model\ModelInternalServerError
     */
    public function createReservation($booking_id, $authorization, $reservation, ?int $hostIndex = null, array $variables = [], string $contentType = self::contentTypes['createReservation'][0])
    {
        list($response) = $this->createReservationWithHttpInfo($booking_id, $authorization, $reservation, $hostIndex, $variables, $contentType);
        return $response;
    }

    /**
     * Operation createReservationWithHttpInfo
     *
     * Create a reservation
     *
     * This operation contains host(s) defined in the OpenAPI spec. Use 'hostIndex' to select the host.
     * if needed, use the 'variables' parameter to pass variables to the host.
     * URL: https://api.datatrans.com/upp/services/v1/inline/token
     *
     * @param  string $booking_id The id of the booking (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  \Katanox\Model\HttpReservationCreationRequest $reservation Reservation body (required)
     * @param  null|int $hostIndex Host index. Defaults to null. If null, then the library will use $this->hostIndex instead
     * @param  array $variables Associative array of variables to pass to the host. Defaults to empty array.
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReservation'] to see the possible values for this operation
     *
     * @throws \Katanox\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Katanox\Model\HttpReservationResponse|\Katanox\Model\ModelApiError|\Katanox\Model\ModelApiError|\Katanox\Model\ModelApiError|\Katanox\Model\ModelInternalServerError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createReservationWithHttpInfo($booking_id, $authorization, $reservation, ?int $hostIndex = null, array $variables = [], string $contentType = self::contentTypes['createReservation'][0])
    {
        $request = $this->createReservationRequest($booking_id, $authorization, $reservation, $hostIndex, $variables, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Katanox\Model\HttpReservationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\HttpReservationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\HttpReservationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Katanox\Model\ModelApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Katanox\Model\ModelApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Katanox\Model\ModelApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Katanox\Model\ModelInternalServerError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelInternalServerError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelInternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Katanox\Model\HttpReservationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\HttpReservationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelInternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createReservationAsync
     *
     * Create a reservation
     *
     * This operation contains host(s) defined in the OpenAPI spec. Use 'hostIndex' to select the host.
     * if needed, use the 'variables' parameter to pass variables to the host.
     * URL: https://api.datatrans.com/upp/services/v1/inline/token
     *
     * @param  string $booking_id The id of the booking (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  \Katanox\Model\HttpReservationCreationRequest $reservation Reservation body (required)
     * @param  null|int $hostIndex Host index. Defaults to null. If null, then the library will use $this->hostIndex instead
     * @param  array $variables Associative array of variables to pass to the host. Defaults to empty array.
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReservation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createReservationAsync($booking_id, $authorization, $reservation, ?int $hostIndex = null, array $variables = [], string $contentType = self::contentTypes['createReservation'][0])
    {
        return $this->createReservationAsyncWithHttpInfo($booking_id, $authorization, $reservation, $hostIndex, $variables, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createReservationAsyncWithHttpInfo
     *
     * Create a reservation
     *
     * This operation contains host(s) defined in the OpenAPI spec. Use 'hostIndex' to select the host.
     * if needed, use the 'variables' parameter to pass variables to the host.
     * URL: https://api.datatrans.com/upp/services/v1/inline/token
     *
     * @param  string $booking_id The id of the booking (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  \Katanox\Model\HttpReservationCreationRequest $reservation Reservation body (required)
     * @param  null|int $hostIndex Host index. Defaults to null. If null, then the library will use $this->hostIndex instead
     * @param  array $variables Associative array of variables to pass to the host. Defaults to empty array.
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReservation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createReservationAsyncWithHttpInfo($booking_id, $authorization, $reservation, ?int $hostIndex = null, array $variables = [], string $contentType = self::contentTypes['createReservation'][0])
    {
        $returnType = '\Katanox\Model\HttpReservationResponse';
        $request = $this->createReservationRequest($booking_id, $authorization, $reservation, $hostIndex, $variables, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createReservation'
     *
    * This operation contains host(s) defined in the OpenAPI spec. Use 'hostIndex' to select the host.
    * if needed, use the 'variables' parameter to pass variables to the host.
     * URL: https://api.datatrans.com/upp/services/v1/inline/token
     *
     * @param  string $booking_id The id of the booking (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  \Katanox\Model\HttpReservationCreationRequest $reservation Reservation body (required)
     * @param  null|int $hostIndex Host index. Defaults to null. If null, then the library will use $this->hostIndex instead
     * @param  array $variables Associative array of variables to pass to the host. Defaults to empty array.
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReservation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createReservationRequest($booking_id, $authorization, $reservation, ?int $hostIndex = null, array $variables = [], string $contentType = self::contentTypes['createReservation'][0])
    {

        // verify the required parameter 'booking_id' is set
        if ($booking_id === null || (is_array($booking_id) && count($booking_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $booking_id when calling createReservation'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling createReservation'
            );
        }

        // verify the required parameter 'reservation' is set
        if ($reservation === null || (is_array($reservation) && count($reservation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reservation when calling createReservation'
            );
        }


        $resourcePath = '/bookings/{booking_id}/reservations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($booking_id !== null) {
            $resourcePath = str_replace(
                '{' . 'booking_id' . '}',
                ObjectSerializer::toPathValue($booking_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($reservation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($reservation));
            } else {
                $httpBody = $reservation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        # Preserve the original behavior of server indexing.
        if ($hostIndex === null) {
            $hostIndex = $this->hostIndex;
        }

        $hostSettings = $this->getHostSettingsForcreateReservation();

        if ($hostIndex < 0 || $hostIndex >= count($hostSettings)) {
            throw new \InvalidArgumentException("Invalid index {$hostIndex} when selecting the host. Must be less than ".count($hostSettings));
        }
        $operationHost = Configuration::getHostString($hostSettings, $hostIndex, $variables);
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Returns an array of host settings for Operation createReservation
     *
     * @return array an array of host settings
     */
    protected function getHostSettingsForcreateReservation(): array
    {
        return [
            [
                "url" => "https://api.datatrans.com/upp/services/v1/inline/token",
                "description" => "No description provided",
            ]
        ];
    }

    /**
     * Operation getBookingById
     *
     * Retrieve a booking
     *
     * @param  string $booking_id The ID of the booking (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBookingById'] to see the possible values for this operation
     *
     * @throws \Katanox\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Katanox\Model\HttpBookingResponse|\Katanox\Model\ModelApiError|\Katanox\Model\ModelInternalServerError
     */
    public function getBookingById($booking_id, $authorization, string $contentType = self::contentTypes['getBookingById'][0])
    {
        list($response) = $this->getBookingByIdWithHttpInfo($booking_id, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation getBookingByIdWithHttpInfo
     *
     * Retrieve a booking
     *
     * @param  string $booking_id The ID of the booking (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBookingById'] to see the possible values for this operation
     *
     * @throws \Katanox\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Katanox\Model\HttpBookingResponse|\Katanox\Model\ModelApiError|\Katanox\Model\ModelInternalServerError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBookingByIdWithHttpInfo($booking_id, $authorization, string $contentType = self::contentTypes['getBookingById'][0])
    {
        $request = $this->getBookingByIdRequest($booking_id, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Katanox\Model\HttpBookingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\HttpBookingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\HttpBookingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Katanox\Model\ModelApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Katanox\Model\ModelInternalServerError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelInternalServerError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelInternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Katanox\Model\HttpBookingResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\HttpBookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelInternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBookingByIdAsync
     *
     * Retrieve a booking
     *
     * @param  string $booking_id The ID of the booking (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBookingById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBookingByIdAsync($booking_id, $authorization, string $contentType = self::contentTypes['getBookingById'][0])
    {
        return $this->getBookingByIdAsyncWithHttpInfo($booking_id, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBookingByIdAsyncWithHttpInfo
     *
     * Retrieve a booking
     *
     * @param  string $booking_id The ID of the booking (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBookingById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBookingByIdAsyncWithHttpInfo($booking_id, $authorization, string $contentType = self::contentTypes['getBookingById'][0])
    {
        $returnType = '\Katanox\Model\HttpBookingResponse';
        $request = $this->getBookingByIdRequest($booking_id, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBookingById'
     *
     * @param  string $booking_id The ID of the booking (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBookingById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBookingByIdRequest($booking_id, $authorization, string $contentType = self::contentTypes['getBookingById'][0])
    {

        // verify the required parameter 'booking_id' is set
        if ($booking_id === null || (is_array($booking_id) && count($booking_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $booking_id when calling getBookingById'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getBookingById'
            );
        }


        $resourcePath = '/bookings/{booking_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($booking_id !== null) {
            $resourcePath = str_replace(
                '{' . 'booking_id' . '}',
                ObjectSerializer::toPathValue($booking_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReservationById
     *
     * Retrieve a reservation by id
     *
     * @param  string $booking_id The ID of the booking (required)
     * @param  string $reservation_id The ID of the reservation (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReservationById'] to see the possible values for this operation
     *
     * @throws \Katanox\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Katanox\Model\HttpReservationResponse|\Katanox\Model\ModelApiError|\Katanox\Model\ModelInternalServerError
     */
    public function getReservationById($booking_id, $reservation_id, $authorization, string $contentType = self::contentTypes['getReservationById'][0])
    {
        list($response) = $this->getReservationByIdWithHttpInfo($booking_id, $reservation_id, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation getReservationByIdWithHttpInfo
     *
     * Retrieve a reservation by id
     *
     * @param  string $booking_id The ID of the booking (required)
     * @param  string $reservation_id The ID of the reservation (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReservationById'] to see the possible values for this operation
     *
     * @throws \Katanox\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Katanox\Model\HttpReservationResponse|\Katanox\Model\ModelApiError|\Katanox\Model\ModelInternalServerError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReservationByIdWithHttpInfo($booking_id, $reservation_id, $authorization, string $contentType = self::contentTypes['getReservationById'][0])
    {
        $request = $this->getReservationByIdRequest($booking_id, $reservation_id, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Katanox\Model\HttpReservationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\HttpReservationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\HttpReservationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Katanox\Model\ModelApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Katanox\Model\ModelInternalServerError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelInternalServerError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelInternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Katanox\Model\HttpReservationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\HttpReservationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelInternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReservationByIdAsync
     *
     * Retrieve a reservation by id
     *
     * @param  string $booking_id The ID of the booking (required)
     * @param  string $reservation_id The ID of the reservation (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReservationById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReservationByIdAsync($booking_id, $reservation_id, $authorization, string $contentType = self::contentTypes['getReservationById'][0])
    {
        return $this->getReservationByIdAsyncWithHttpInfo($booking_id, $reservation_id, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReservationByIdAsyncWithHttpInfo
     *
     * Retrieve a reservation by id
     *
     * @param  string $booking_id The ID of the booking (required)
     * @param  string $reservation_id The ID of the reservation (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReservationById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReservationByIdAsyncWithHttpInfo($booking_id, $reservation_id, $authorization, string $contentType = self::contentTypes['getReservationById'][0])
    {
        $returnType = '\Katanox\Model\HttpReservationResponse';
        $request = $this->getReservationByIdRequest($booking_id, $reservation_id, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReservationById'
     *
     * @param  string $booking_id The ID of the booking (required)
     * @param  string $reservation_id The ID of the reservation (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReservationById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getReservationByIdRequest($booking_id, $reservation_id, $authorization, string $contentType = self::contentTypes['getReservationById'][0])
    {

        // verify the required parameter 'booking_id' is set
        if ($booking_id === null || (is_array($booking_id) && count($booking_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $booking_id when calling getReservationById'
            );
        }

        // verify the required parameter 'reservation_id' is set
        if ($reservation_id === null || (is_array($reservation_id) && count($reservation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reservation_id when calling getReservationById'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getReservationById'
            );
        }


        $resourcePath = '/bookings/{booking_id}/reservations/{reservation_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($booking_id !== null) {
            $resourcePath = str_replace(
                '{' . 'booking_id' . '}',
                ObjectSerializer::toPathValue($booking_id),
                $resourcePath
            );
        }
        // path params
        if ($reservation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'reservation_id' . '}',
                ObjectSerializer::toPathValue($reservation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateReservation
     *
     * Update a reservation
     *
     * @param  string $booking_id The id of the booking (required)
     * @param  string $reservation_id The id of the reservation (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  \Katanox\Model\HttpReservationUpdateRequest $reservation The reservation body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateReservation'] to see the possible values for this operation
     *
     * @throws \Katanox\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Katanox\Model\HttpReservationResponse|\Katanox\Model\ModelApiError|\Katanox\Model\ModelApiError|\Katanox\Model\ModelApiError|\Katanox\Model\ModelInternalServerError
     */
    public function updateReservation($booking_id, $reservation_id, $authorization, $reservation, string $contentType = self::contentTypes['updateReservation'][0])
    {
        list($response) = $this->updateReservationWithHttpInfo($booking_id, $reservation_id, $authorization, $reservation, $contentType);
        return $response;
    }

    /**
     * Operation updateReservationWithHttpInfo
     *
     * Update a reservation
     *
     * @param  string $booking_id The id of the booking (required)
     * @param  string $reservation_id The id of the reservation (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  \Katanox\Model\HttpReservationUpdateRequest $reservation The reservation body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateReservation'] to see the possible values for this operation
     *
     * @throws \Katanox\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Katanox\Model\HttpReservationResponse|\Katanox\Model\ModelApiError|\Katanox\Model\ModelApiError|\Katanox\Model\ModelApiError|\Katanox\Model\ModelInternalServerError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateReservationWithHttpInfo($booking_id, $reservation_id, $authorization, $reservation, string $contentType = self::contentTypes['updateReservation'][0])
    {
        $request = $this->updateReservationRequest($booking_id, $reservation_id, $authorization, $reservation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Katanox\Model\HttpReservationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\HttpReservationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\HttpReservationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Katanox\Model\ModelApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Katanox\Model\ModelApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Katanox\Model\ModelApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Katanox\Model\ModelInternalServerError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelInternalServerError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelInternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Katanox\Model\HttpReservationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\HttpReservationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelInternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateReservationAsync
     *
     * Update a reservation
     *
     * @param  string $booking_id The id of the booking (required)
     * @param  string $reservation_id The id of the reservation (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  \Katanox\Model\HttpReservationUpdateRequest $reservation The reservation body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateReservation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateReservationAsync($booking_id, $reservation_id, $authorization, $reservation, string $contentType = self::contentTypes['updateReservation'][0])
    {
        return $this->updateReservationAsyncWithHttpInfo($booking_id, $reservation_id, $authorization, $reservation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateReservationAsyncWithHttpInfo
     *
     * Update a reservation
     *
     * @param  string $booking_id The id of the booking (required)
     * @param  string $reservation_id The id of the reservation (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  \Katanox\Model\HttpReservationUpdateRequest $reservation The reservation body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateReservation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateReservationAsyncWithHttpInfo($booking_id, $reservation_id, $authorization, $reservation, string $contentType = self::contentTypes['updateReservation'][0])
    {
        $returnType = '\Katanox\Model\HttpReservationResponse';
        $request = $this->updateReservationRequest($booking_id, $reservation_id, $authorization, $reservation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateReservation'
     *
     * @param  string $booking_id The id of the booking (required)
     * @param  string $reservation_id The id of the reservation (required)
     * @param  string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param  \Katanox\Model\HttpReservationUpdateRequest $reservation The reservation body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateReservation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateReservationRequest($booking_id, $reservation_id, $authorization, $reservation, string $contentType = self::contentTypes['updateReservation'][0])
    {

        // verify the required parameter 'booking_id' is set
        if ($booking_id === null || (is_array($booking_id) && count($booking_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $booking_id when calling updateReservation'
            );
        }

        // verify the required parameter 'reservation_id' is set
        if ($reservation_id === null || (is_array($reservation_id) && count($reservation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reservation_id when calling updateReservation'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling updateReservation'
            );
        }

        // verify the required parameter 'reservation' is set
        if ($reservation === null || (is_array($reservation) && count($reservation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reservation when calling updateReservation'
            );
        }


        $resourcePath = '/bookings/{booking_id}/reservations/{reservation_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($booking_id !== null) {
            $resourcePath = str_replace(
                '{' . 'booking_id' . '}',
                ObjectSerializer::toPathValue($booking_id),
                $resourcePath
            );
        }
        // path params
        if ($reservation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'reservation_id' . '}',
                ObjectSerializer::toPathValue($reservation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($reservation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($reservation));
            } else {
                $httpBody = $reservation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
