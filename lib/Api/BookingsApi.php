<?php
/**
 * BookingsApi
 * PHP version 7.4.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Katanox API Documentation.
 *
 * The Katanox API allows any travel seller to search and book accommodation.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Katanox\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use InvalidArgumentException;
use Katanox\ApiException;
use Katanox\Configuration;
use Katanox\HeaderSelector;
use Katanox\ObjectSerializer;
use RuntimeException;

/**
 * BookingsApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class BookingsApi
{
    /** @var string[] */
    public const contentTypes = [
        'cancelBookingById' => [
            'application/json',
        ],
        'cancelReservation' => [
            'application/json',
        ],
        'createBooking' => [
            'application/json',
        ],
        'createReservation' => [
            'application/json',
        ],
        'getBookingById' => [
            'application/json',
        ],
        'getReservationById' => [
            'application/json',
        ],
        'updateReservation' => [
            'application/json',
        ],
    ];

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index.
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index.
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelBookingById.
     *
     * Cancel a booking
     *
     * @param string $booking_id    The id of the booking to be cancelled (required)
     * @param string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param string $contentType   The value for the Content-Type header. Check self::contentTypes['cancelBookingById'] to see the possible values for this operation
     *
     * @throws \Katanox\ApiException    on non-2xx response
     * @throws InvalidArgumentException
     */
    public function cancelBookingById($booking_id, $authorization, string $contentType = self::contentTypes['cancelBookingById'][0])
    {
        $this->cancelBookingByIdWithHttpInfo($booking_id, $authorization, $contentType);
    }

    /**
     * Operation cancelBookingByIdWithHttpInfo.
     *
     * Cancel a booking
     *
     * @param string $booking_id    The id of the booking to be cancelled (required)
     * @param string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param string $contentType   The value for the Content-Type header. Check self::contentTypes['cancelBookingById'] to see the possible values for this operation
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws \Katanox\ApiException    on non-2xx response
     * @throws InvalidArgumentException
     */
    public function cancelBookingByIdWithHttpInfo($booking_id, $authorization, string $contentType = self::contentTypes['cancelBookingById'][0])
    {
        $request = $this->cancelBookingByIdRequest($booking_id, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelInternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cancelBookingByIdAsync.
     *
     * Cancel a booking
     *
     * @param string $booking_id    The id of the booking to be cancelled (required)
     * @param string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param string $contentType   The value for the Content-Type header. Check self::contentTypes['cancelBookingById'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *
     * @throws InvalidArgumentException
     */
    public function cancelBookingByIdAsync($booking_id, $authorization, string $contentType = self::contentTypes['cancelBookingById'][0])
    {
        return $this->cancelBookingByIdAsyncWithHttpInfo($booking_id, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation cancelBookingByIdAsyncWithHttpInfo.
     *
     * Cancel a booking
     *
     * @param string $booking_id    The id of the booking to be cancelled (required)
     * @param string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param string $contentType   The value for the Content-Type header. Check self::contentTypes['cancelBookingById'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *
     * @throws InvalidArgumentException
     */
    public function cancelBookingByIdAsyncWithHttpInfo($booking_id, $authorization, string $contentType = self::contentTypes['cancelBookingById'][0])
    {
        $returnType = '';
        $request = $this->cancelBookingByIdRequest($booking_id, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'cancelBookingById'.
     *
     * @param string $booking_id    The id of the booking to be cancelled (required)
     * @param string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param string $contentType   The value for the Content-Type header. Check self::contentTypes['cancelBookingById'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Psr7\Request
     *
     * @throws InvalidArgumentException
     */
    public function cancelBookingByIdRequest($booking_id, $authorization, string $contentType = self::contentTypes['cancelBookingById'][0])
    {
        // verify the required parameter 'booking_id' is set
        if (null === $booking_id || (is_array($booking_id) && 0 === count($booking_id))) {
            throw new InvalidArgumentException(
                'Missing the required parameter $booking_id when calling cancelBookingById'
            );
        }

        // verify the required parameter 'authorization' is set
        if (null === $authorization || (is_array($authorization) && 0 === count($authorization))) {
            throw new InvalidArgumentException(
                'Missing the required parameter $authorization when calling cancelBookingById'
            );
        }

        $resourcePath = '/bookings/{booking_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if (null !== $authorization) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if (null !== $booking_id) {
            $resourcePath = str_replace(
                '{booking_id}',
                ObjectSerializer::toPathValue($booking_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'DELETE',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelReservation.
     *
     * Cancel a reservation
     *
     * @param string $booking_id     The id of the booking (required)
     * @param string $reservation_id The id of the reservation (required)
     * @param string $authorization  Type &#39;Bearer&#39; and then your API Token (required)
     * @param string $contentType    The value for the Content-Type header. Check self::contentTypes['cancelReservation'] to see the possible values for this operation
     *
     * @throws \Katanox\ApiException    on non-2xx response
     * @throws InvalidArgumentException
     */
    public function cancelReservation($booking_id, $reservation_id, $authorization, string $contentType = self::contentTypes['cancelReservation'][0])
    {
        $this->cancelReservationWithHttpInfo($booking_id, $reservation_id, $authorization, $contentType);
    }

    /**
     * Operation cancelReservationWithHttpInfo.
     *
     * Cancel a reservation
     *
     * @param string $booking_id     The id of the booking (required)
     * @param string $reservation_id The id of the reservation (required)
     * @param string $authorization  Type &#39;Bearer&#39; and then your API Token (required)
     * @param string $contentType    The value for the Content-Type header. Check self::contentTypes['cancelReservation'] to see the possible values for this operation
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws \Katanox\ApiException    on non-2xx response
     * @throws InvalidArgumentException
     */
    public function cancelReservationWithHttpInfo($booking_id, $reservation_id, $authorization, string $contentType = self::contentTypes['cancelReservation'][0])
    {
        $request = $this->cancelReservationRequest($booking_id, $reservation_id, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelInternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cancelReservationAsync.
     *
     * Cancel a reservation
     *
     * @param string $booking_id     The id of the booking (required)
     * @param string $reservation_id The id of the reservation (required)
     * @param string $authorization  Type &#39;Bearer&#39; and then your API Token (required)
     * @param string $contentType    The value for the Content-Type header. Check self::contentTypes['cancelReservation'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *
     * @throws InvalidArgumentException
     */
    public function cancelReservationAsync($booking_id, $reservation_id, $authorization, string $contentType = self::contentTypes['cancelReservation'][0])
    {
        return $this->cancelReservationAsyncWithHttpInfo($booking_id, $reservation_id, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation cancelReservationAsyncWithHttpInfo.
     *
     * Cancel a reservation
     *
     * @param string $booking_id     The id of the booking (required)
     * @param string $reservation_id The id of the reservation (required)
     * @param string $authorization  Type &#39;Bearer&#39; and then your API Token (required)
     * @param string $contentType    The value for the Content-Type header. Check self::contentTypes['cancelReservation'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *
     * @throws InvalidArgumentException
     */
    public function cancelReservationAsyncWithHttpInfo($booking_id, $reservation_id, $authorization, string $contentType = self::contentTypes['cancelReservation'][0])
    {
        $returnType = '';
        $request = $this->cancelReservationRequest($booking_id, $reservation_id, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'cancelReservation'.
     *
     * @param string $booking_id     The id of the booking (required)
     * @param string $reservation_id The id of the reservation (required)
     * @param string $authorization  Type &#39;Bearer&#39; and then your API Token (required)
     * @param string $contentType    The value for the Content-Type header. Check self::contentTypes['cancelReservation'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Psr7\Request
     *
     * @throws InvalidArgumentException
     */
    public function cancelReservationRequest($booking_id, $reservation_id, $authorization, string $contentType = self::contentTypes['cancelReservation'][0])
    {
        // verify the required parameter 'booking_id' is set
        if (null === $booking_id || (is_array($booking_id) && 0 === count($booking_id))) {
            throw new InvalidArgumentException(
                'Missing the required parameter $booking_id when calling cancelReservation'
            );
        }

        // verify the required parameter 'reservation_id' is set
        if (null === $reservation_id || (is_array($reservation_id) && 0 === count($reservation_id))) {
            throw new InvalidArgumentException(
                'Missing the required parameter $reservation_id when calling cancelReservation'
            );
        }

        // verify the required parameter 'authorization' is set
        if (null === $authorization || (is_array($authorization) && 0 === count($authorization))) {
            throw new InvalidArgumentException(
                'Missing the required parameter $authorization when calling cancelReservation'
            );
        }

        $resourcePath = '/bookings/{booking_id}/reservations/{reservation_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if (null !== $authorization) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if (null !== $booking_id) {
            $resourcePath = str_replace(
                '{booking_id}',
                ObjectSerializer::toPathValue($booking_id),
                $resourcePath
            );
        }
        // path params
        if (null !== $reservation_id) {
            $resourcePath = str_replace(
                '{reservation_id}',
                ObjectSerializer::toPathValue($reservation_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'DELETE',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBooking.
     *
     * Create a booking
     *
     * @param string                                    $authorization                 Type &#39;Bearer&#39; and then your API Token (required)
     * @param \Katanox\Model\HttpBookingCreationRequest $http_booking_creation_request Booking body (required)
     * @param string                                    $contentType                   The value for the Content-Type header. Check self::contentTypes['createBooking'] to see the possible values for this operation
     *
     * @return \Katanox\Model\HttpBookingResponse|\Katanox\Model\ModelApiError|\Katanox\Model\ModelApiError|\Katanox\Model\ModelInternalServerError
     *
     * @throws \Katanox\ApiException    on non-2xx response
     * @throws InvalidArgumentException
     */
    public function createBooking($authorization, $http_booking_creation_request, string $contentType = self::contentTypes['createBooking'][0])
    {
        list($response) = $this->createBookingWithHttpInfo($authorization, $http_booking_creation_request, $contentType);

        return $response;
    }

    /**
     * Operation createBookingWithHttpInfo.
     *
     * Create a booking
     *
     * @param string                                    $authorization                 Type &#39;Bearer&#39; and then your API Token (required)
     * @param \Katanox\Model\HttpBookingCreationRequest $http_booking_creation_request Booking body (required)
     * @param string                                    $contentType                   The value for the Content-Type header. Check self::contentTypes['createBooking'] to see the possible values for this operation
     *
     * @return array of \Katanox\Model\HttpBookingResponse|\Katanox\Model\ModelApiError|\Katanox\Model\ModelApiError|\Katanox\Model\ModelInternalServerError, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws \Katanox\ApiException    on non-2xx response
     * @throws InvalidArgumentException
     */
    public function createBookingWithHttpInfo($authorization, $http_booking_creation_request, string $contentType = self::contentTypes['createBooking'][0])
    {
        $request = $this->createBookingRequest($authorization, $http_booking_creation_request, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ('\Katanox\Model\HttpBookingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\HttpBookingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\HttpBookingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];

                case 400:
                    if ('\Katanox\Model\ModelApiError' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];

                case 422:
                    if ('\Katanox\Model\ModelApiError' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];

                case 500:
                    if ('\Katanox\Model\ModelInternalServerError' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelInternalServerError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelInternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Katanox\Model\HttpBookingResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\HttpBookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelInternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createBookingAsync.
     *
     * Create a booking
     *
     * @param string                                    $authorization                 Type &#39;Bearer&#39; and then your API Token (required)
     * @param \Katanox\Model\HttpBookingCreationRequest $http_booking_creation_request Booking body (required)
     * @param string                                    $contentType                   The value for the Content-Type header. Check self::contentTypes['createBooking'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *
     * @throws InvalidArgumentException
     */
    public function createBookingAsync($authorization, $http_booking_creation_request, string $contentType = self::contentTypes['createBooking'][0])
    {
        return $this->createBookingAsyncWithHttpInfo($authorization, $http_booking_creation_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation createBookingAsyncWithHttpInfo.
     *
     * Create a booking
     *
     * @param string                                    $authorization                 Type &#39;Bearer&#39; and then your API Token (required)
     * @param \Katanox\Model\HttpBookingCreationRequest $http_booking_creation_request Booking body (required)
     * @param string                                    $contentType                   The value for the Content-Type header. Check self::contentTypes['createBooking'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *
     * @throws InvalidArgumentException
     */
    public function createBookingAsyncWithHttpInfo($authorization, $http_booking_creation_request, string $contentType = self::contentTypes['createBooking'][0])
    {
        $returnType = '\Katanox\Model\HttpBookingResponse';
        $request = $this->createBookingRequest($authorization, $http_booking_creation_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'createBooking'.
     *
     * @param string                                    $authorization                 Type &#39;Bearer&#39; and then your API Token (required)
     * @param \Katanox\Model\HttpBookingCreationRequest $http_booking_creation_request Booking body (required)
     * @param string                                    $contentType                   The value for the Content-Type header. Check self::contentTypes['createBooking'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Psr7\Request
     *
     * @throws InvalidArgumentException
     */
    public function createBookingRequest($authorization, $http_booking_creation_request, string $contentType = self::contentTypes['createBooking'][0])
    {
        // verify the required parameter 'authorization' is set
        if (null === $authorization || (is_array($authorization) && 0 === count($authorization))) {
            throw new InvalidArgumentException(
                'Missing the required parameter $authorization when calling createBooking'
            );
        }

        // verify the required parameter 'http_booking_creation_request' is set
        if (null === $http_booking_creation_request || (is_array($http_booking_creation_request) && 0 === count($http_booking_creation_request))) {
            throw new InvalidArgumentException(
                'Missing the required parameter $http_booking_creation_request when calling createBooking'
            );
        }

        $resourcePath = '/bookings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if (null !== $authorization) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['*/*'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($http_booking_creation_request)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($http_booking_creation_request));
            } else {
                $httpBody = $http_booking_creation_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createReservation.
     *
     * Create a reservation
     *
     * @param string                                        $booking_id                        The id of the booking (required)
     * @param string                                        $authorization                     Type &#39;Bearer&#39; and then your API Token (required)
     * @param \Katanox\Model\HttpReservationCreationRequest $http_reservation_creation_request Reservation body (required)
     * @param string                                        $contentType                       The value for the Content-Type header. Check self::contentTypes['createReservation'] to see the possible values for this operation
     *
     * @return \Katanox\Model\HttpReservationResponse|\Katanox\Model\ModelApiError|\Katanox\Model\ModelApiError|\Katanox\Model\ModelApiError|\Katanox\Model\ModelInternalServerError
     *
     * @throws \Katanox\ApiException    on non-2xx response
     * @throws InvalidArgumentException
     */
    public function createReservation($booking_id, $authorization, $http_reservation_creation_request, string $contentType = self::contentTypes['createReservation'][0])
    {
        list($response) = $this->createReservationWithHttpInfo($booking_id, $authorization, $http_reservation_creation_request, $contentType);

        return $response;
    }

    /**
     * Operation createReservationWithHttpInfo.
     *
     * Create a reservation
     *
     * @param string                                        $booking_id                        The id of the booking (required)
     * @param string                                        $authorization                     Type &#39;Bearer&#39; and then your API Token (required)
     * @param \Katanox\Model\HttpReservationCreationRequest $http_reservation_creation_request Reservation body (required)
     * @param string                                        $contentType                       The value for the Content-Type header. Check self::contentTypes['createReservation'] to see the possible values for this operation
     *
     * @return array of \Katanox\Model\HttpReservationResponse|\Katanox\Model\ModelApiError|\Katanox\Model\ModelApiError|\Katanox\Model\ModelApiError|\Katanox\Model\ModelInternalServerError, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws \Katanox\ApiException    on non-2xx response
     * @throws InvalidArgumentException
     */
    public function createReservationWithHttpInfo($booking_id, $authorization, $http_reservation_creation_request, string $contentType = self::contentTypes['createReservation'][0])
    {
        $request = $this->createReservationRequest($booking_id, $authorization, $http_reservation_creation_request, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ('\Katanox\Model\HttpReservationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\HttpReservationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\HttpReservationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];

                case 400:
                    if ('\Katanox\Model\ModelApiError' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];

                case 404:
                    if ('\Katanox\Model\ModelApiError' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];

                case 422:
                    if ('\Katanox\Model\ModelApiError' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];

                case 500:
                    if ('\Katanox\Model\ModelInternalServerError' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelInternalServerError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelInternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Katanox\Model\HttpReservationResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\HttpReservationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelInternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createReservationAsync.
     *
     * Create a reservation
     *
     * @param string                                        $booking_id                        The id of the booking (required)
     * @param string                                        $authorization                     Type &#39;Bearer&#39; and then your API Token (required)
     * @param \Katanox\Model\HttpReservationCreationRequest $http_reservation_creation_request Reservation body (required)
     * @param string                                        $contentType                       The value for the Content-Type header. Check self::contentTypes['createReservation'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *
     * @throws InvalidArgumentException
     */
    public function createReservationAsync($booking_id, $authorization, $http_reservation_creation_request, string $contentType = self::contentTypes['createReservation'][0])
    {
        return $this->createReservationAsyncWithHttpInfo($booking_id, $authorization, $http_reservation_creation_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation createReservationAsyncWithHttpInfo.
     *
     * Create a reservation
     *
     * @param string                                        $booking_id                        The id of the booking (required)
     * @param string                                        $authorization                     Type &#39;Bearer&#39; and then your API Token (required)
     * @param \Katanox\Model\HttpReservationCreationRequest $http_reservation_creation_request Reservation body (required)
     * @param string                                        $contentType                       The value for the Content-Type header. Check self::contentTypes['createReservation'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *
     * @throws InvalidArgumentException
     */
    public function createReservationAsyncWithHttpInfo($booking_id, $authorization, $http_reservation_creation_request, string $contentType = self::contentTypes['createReservation'][0])
    {
        $returnType = '\Katanox\Model\HttpReservationResponse';
        $request = $this->createReservationRequest($booking_id, $authorization, $http_reservation_creation_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'createReservation'.
     *
     * @param string                                        $booking_id                        The id of the booking (required)
     * @param string                                        $authorization                     Type &#39;Bearer&#39; and then your API Token (required)
     * @param \Katanox\Model\HttpReservationCreationRequest $http_reservation_creation_request Reservation body (required)
     * @param string                                        $contentType                       The value for the Content-Type header. Check self::contentTypes['createReservation'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Psr7\Request
     *
     * @throws InvalidArgumentException
     */
    public function createReservationRequest($booking_id, $authorization, $http_reservation_creation_request, string $contentType = self::contentTypes['createReservation'][0])
    {
        // verify the required parameter 'booking_id' is set
        if (null === $booking_id || (is_array($booking_id) && 0 === count($booking_id))) {
            throw new InvalidArgumentException(
                'Missing the required parameter $booking_id when calling createReservation'
            );
        }

        // verify the required parameter 'authorization' is set
        if (null === $authorization || (is_array($authorization) && 0 === count($authorization))) {
            throw new InvalidArgumentException(
                'Missing the required parameter $authorization when calling createReservation'
            );
        }

        // verify the required parameter 'http_reservation_creation_request' is set
        if (null === $http_reservation_creation_request || (is_array($http_reservation_creation_request) && 0 === count($http_reservation_creation_request))) {
            throw new InvalidArgumentException(
                'Missing the required parameter $http_reservation_creation_request when calling createReservation'
            );
        }

        $resourcePath = '/bookings/{booking_id}/reservations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if (null !== $authorization) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if (null !== $booking_id) {
            $resourcePath = str_replace(
                '{booking_id}',
                ObjectSerializer::toPathValue($booking_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($http_reservation_creation_request)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($http_reservation_creation_request));
            } else {
                $httpBody = $http_reservation_creation_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBookingById.
     *
     * Retrieve a booking
     *
     * @param string $booking_id    The ID of the booking (required)
     * @param string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param string $contentType   The value for the Content-Type header. Check self::contentTypes['getBookingById'] to see the possible values for this operation
     *
     * @return \Katanox\Model\HttpBookingResponse|\Katanox\Model\ModelApiError|\Katanox\Model\ModelInternalServerError
     *
     * @throws \Katanox\ApiException    on non-2xx response
     * @throws InvalidArgumentException
     */
    public function getBookingById($booking_id, $authorization, string $contentType = self::contentTypes['getBookingById'][0])
    {
        list($response) = $this->getBookingByIdWithHttpInfo($booking_id, $authorization, $contentType);

        return $response;
    }

    /**
     * Operation getBookingByIdWithHttpInfo.
     *
     * Retrieve a booking
     *
     * @param string $booking_id    The ID of the booking (required)
     * @param string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param string $contentType   The value for the Content-Type header. Check self::contentTypes['getBookingById'] to see the possible values for this operation
     *
     * @return array of \Katanox\Model\HttpBookingResponse|\Katanox\Model\ModelApiError|\Katanox\Model\ModelInternalServerError, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws \Katanox\ApiException    on non-2xx response
     * @throws InvalidArgumentException
     */
    public function getBookingByIdWithHttpInfo($booking_id, $authorization, string $contentType = self::contentTypes['getBookingById'][0])
    {
        $request = $this->getBookingByIdRequest($booking_id, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Katanox\Model\HttpBookingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\HttpBookingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\HttpBookingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];

                case 404:
                    if ('\Katanox\Model\ModelApiError' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];

                case 500:
                    if ('\Katanox\Model\ModelInternalServerError' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelInternalServerError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelInternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Katanox\Model\HttpBookingResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\HttpBookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelInternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBookingByIdAsync.
     *
     * Retrieve a booking
     *
     * @param string $booking_id    The ID of the booking (required)
     * @param string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param string $contentType   The value for the Content-Type header. Check self::contentTypes['getBookingById'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *
     * @throws InvalidArgumentException
     */
    public function getBookingByIdAsync($booking_id, $authorization, string $contentType = self::contentTypes['getBookingById'][0])
    {
        return $this->getBookingByIdAsyncWithHttpInfo($booking_id, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getBookingByIdAsyncWithHttpInfo.
     *
     * Retrieve a booking
     *
     * @param string $booking_id    The ID of the booking (required)
     * @param string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param string $contentType   The value for the Content-Type header. Check self::contentTypes['getBookingById'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *
     * @throws InvalidArgumentException
     */
    public function getBookingByIdAsyncWithHttpInfo($booking_id, $authorization, string $contentType = self::contentTypes['getBookingById'][0])
    {
        $returnType = '\Katanox\Model\HttpBookingResponse';
        $request = $this->getBookingByIdRequest($booking_id, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getBookingById'.
     *
     * @param string $booking_id    The ID of the booking (required)
     * @param string $authorization Type &#39;Bearer&#39; and then your API Token (required)
     * @param string $contentType   The value for the Content-Type header. Check self::contentTypes['getBookingById'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Psr7\Request
     *
     * @throws InvalidArgumentException
     */
    public function getBookingByIdRequest($booking_id, $authorization, string $contentType = self::contentTypes['getBookingById'][0])
    {
        // verify the required parameter 'booking_id' is set
        if (null === $booking_id || (is_array($booking_id) && 0 === count($booking_id))) {
            throw new InvalidArgumentException(
                'Missing the required parameter $booking_id when calling getBookingById'
            );
        }

        // verify the required parameter 'authorization' is set
        if (null === $authorization || (is_array($authorization) && 0 === count($authorization))) {
            throw new InvalidArgumentException(
                'Missing the required parameter $authorization when calling getBookingById'
            );
        }

        $resourcePath = '/bookings/{booking_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if (null !== $authorization) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if (null !== $booking_id) {
            $resourcePath = str_replace(
                '{booking_id}',
                ObjectSerializer::toPathValue($booking_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReservationById.
     *
     * Retrieve a reservation by id
     *
     * @param string $booking_id     The ID of the booking (required)
     * @param string $reservation_id The ID of the reservation (required)
     * @param string $authorization  Type &#39;Bearer&#39; and then your API Token (required)
     * @param string $contentType    The value for the Content-Type header. Check self::contentTypes['getReservationById'] to see the possible values for this operation
     *
     * @return \Katanox\Model\HttpReservationResponse|\Katanox\Model\ModelApiError|\Katanox\Model\ModelInternalServerError
     *
     * @throws \Katanox\ApiException    on non-2xx response
     * @throws InvalidArgumentException
     */
    public function getReservationById($booking_id, $reservation_id, $authorization, string $contentType = self::contentTypes['getReservationById'][0])
    {
        list($response) = $this->getReservationByIdWithHttpInfo($booking_id, $reservation_id, $authorization, $contentType);

        return $response;
    }

    /**
     * Operation getReservationByIdWithHttpInfo.
     *
     * Retrieve a reservation by id
     *
     * @param string $booking_id     The ID of the booking (required)
     * @param string $reservation_id The ID of the reservation (required)
     * @param string $authorization  Type &#39;Bearer&#39; and then your API Token (required)
     * @param string $contentType    The value for the Content-Type header. Check self::contentTypes['getReservationById'] to see the possible values for this operation
     *
     * @return array of \Katanox\Model\HttpReservationResponse|\Katanox\Model\ModelApiError|\Katanox\Model\ModelInternalServerError, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws \Katanox\ApiException    on non-2xx response
     * @throws InvalidArgumentException
     */
    public function getReservationByIdWithHttpInfo($booking_id, $reservation_id, $authorization, string $contentType = self::contentTypes['getReservationById'][0])
    {
        $request = $this->getReservationByIdRequest($booking_id, $reservation_id, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Katanox\Model\HttpReservationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\HttpReservationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\HttpReservationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];

                case 404:
                    if ('\Katanox\Model\ModelApiError' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];

                case 500:
                    if ('\Katanox\Model\ModelInternalServerError' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelInternalServerError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelInternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Katanox\Model\HttpReservationResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\HttpReservationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelInternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getReservationByIdAsync.
     *
     * Retrieve a reservation by id
     *
     * @param string $booking_id     The ID of the booking (required)
     * @param string $reservation_id The ID of the reservation (required)
     * @param string $authorization  Type &#39;Bearer&#39; and then your API Token (required)
     * @param string $contentType    The value for the Content-Type header. Check self::contentTypes['getReservationById'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *
     * @throws InvalidArgumentException
     */
    public function getReservationByIdAsync($booking_id, $reservation_id, $authorization, string $contentType = self::contentTypes['getReservationById'][0])
    {
        return $this->getReservationByIdAsyncWithHttpInfo($booking_id, $reservation_id, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getReservationByIdAsyncWithHttpInfo.
     *
     * Retrieve a reservation by id
     *
     * @param string $booking_id     The ID of the booking (required)
     * @param string $reservation_id The ID of the reservation (required)
     * @param string $authorization  Type &#39;Bearer&#39; and then your API Token (required)
     * @param string $contentType    The value for the Content-Type header. Check self::contentTypes['getReservationById'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *
     * @throws InvalidArgumentException
     */
    public function getReservationByIdAsyncWithHttpInfo($booking_id, $reservation_id, $authorization, string $contentType = self::contentTypes['getReservationById'][0])
    {
        $returnType = '\Katanox\Model\HttpReservationResponse';
        $request = $this->getReservationByIdRequest($booking_id, $reservation_id, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getReservationById'.
     *
     * @param string $booking_id     The ID of the booking (required)
     * @param string $reservation_id The ID of the reservation (required)
     * @param string $authorization  Type &#39;Bearer&#39; and then your API Token (required)
     * @param string $contentType    The value for the Content-Type header. Check self::contentTypes['getReservationById'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Psr7\Request
     *
     * @throws InvalidArgumentException
     */
    public function getReservationByIdRequest($booking_id, $reservation_id, $authorization, string $contentType = self::contentTypes['getReservationById'][0])
    {
        // verify the required parameter 'booking_id' is set
        if (null === $booking_id || (is_array($booking_id) && 0 === count($booking_id))) {
            throw new InvalidArgumentException(
                'Missing the required parameter $booking_id when calling getReservationById'
            );
        }

        // verify the required parameter 'reservation_id' is set
        if (null === $reservation_id || (is_array($reservation_id) && 0 === count($reservation_id))) {
            throw new InvalidArgumentException(
                'Missing the required parameter $reservation_id when calling getReservationById'
            );
        }

        // verify the required parameter 'authorization' is set
        if (null === $authorization || (is_array($authorization) && 0 === count($authorization))) {
            throw new InvalidArgumentException(
                'Missing the required parameter $authorization when calling getReservationById'
            );
        }

        $resourcePath = '/bookings/{booking_id}/reservations/{reservation_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if (null !== $authorization) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if (null !== $booking_id) {
            $resourcePath = str_replace(
                '{booking_id}',
                ObjectSerializer::toPathValue($booking_id),
                $resourcePath
            );
        }
        // path params
        if (null !== $reservation_id) {
            $resourcePath = str_replace(
                '{reservation_id}',
                ObjectSerializer::toPathValue($reservation_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateReservation.
     *
     * Update a reservation
     *
     * @param string                                      $booking_id                      The id of the booking (required)
     * @param string                                      $reservation_id                  The id of the reservation (required)
     * @param string                                      $authorization                   Type &#39;Bearer&#39; and then your API Token (required)
     * @param \Katanox\Model\HttpReservationUpdateRequest $http_reservation_update_request The reservation body (required)
     * @param string                                      $contentType                     The value for the Content-Type header. Check self::contentTypes['updateReservation'] to see the possible values for this operation
     *
     * @return \Katanox\Model\HttpReservationResponse|\Katanox\Model\ModelApiError|\Katanox\Model\ModelApiError|\Katanox\Model\ModelApiError|\Katanox\Model\ModelInternalServerError
     *
     * @throws \Katanox\ApiException    on non-2xx response
     * @throws InvalidArgumentException
     */
    public function updateReservation($booking_id, $reservation_id, $authorization, $http_reservation_update_request, string $contentType = self::contentTypes['updateReservation'][0])
    {
        list($response) = $this->updateReservationWithHttpInfo($booking_id, $reservation_id, $authorization, $http_reservation_update_request, $contentType);

        return $response;
    }

    /**
     * Operation updateReservationWithHttpInfo.
     *
     * Update a reservation
     *
     * @param string                                      $booking_id                      The id of the booking (required)
     * @param string                                      $reservation_id                  The id of the reservation (required)
     * @param string                                      $authorization                   Type &#39;Bearer&#39; and then your API Token (required)
     * @param \Katanox\Model\HttpReservationUpdateRequest $http_reservation_update_request The reservation body (required)
     * @param string                                      $contentType                     The value for the Content-Type header. Check self::contentTypes['updateReservation'] to see the possible values for this operation
     *
     * @return array of \Katanox\Model\HttpReservationResponse|\Katanox\Model\ModelApiError|\Katanox\Model\ModelApiError|\Katanox\Model\ModelApiError|\Katanox\Model\ModelInternalServerError, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws \Katanox\ApiException    on non-2xx response
     * @throws InvalidArgumentException
     */
    public function updateReservationWithHttpInfo($booking_id, $reservation_id, $authorization, $http_reservation_update_request, string $contentType = self::contentTypes['updateReservation'][0])
    {
        $request = $this->updateReservationRequest($booking_id, $reservation_id, $authorization, $http_reservation_update_request, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Katanox\Model\HttpReservationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\HttpReservationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\HttpReservationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];

                case 400:
                    if ('\Katanox\Model\ModelApiError' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];

                case 404:
                    if ('\Katanox\Model\ModelApiError' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];

                case 422:
                    if ('\Katanox\Model\ModelApiError' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];

                case 500:
                    if ('\Katanox\Model\ModelInternalServerError' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Katanox\Model\ModelInternalServerError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Katanox\Model\ModelInternalServerError', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Katanox\Model\HttpReservationResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\HttpReservationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Katanox\Model\ModelInternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateReservationAsync.
     *
     * Update a reservation
     *
     * @param string                                      $booking_id                      The id of the booking (required)
     * @param string                                      $reservation_id                  The id of the reservation (required)
     * @param string                                      $authorization                   Type &#39;Bearer&#39; and then your API Token (required)
     * @param \Katanox\Model\HttpReservationUpdateRequest $http_reservation_update_request The reservation body (required)
     * @param string                                      $contentType                     The value for the Content-Type header. Check self::contentTypes['updateReservation'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *
     * @throws InvalidArgumentException
     */
    public function updateReservationAsync($booking_id, $reservation_id, $authorization, $http_reservation_update_request, string $contentType = self::contentTypes['updateReservation'][0])
    {
        return $this->updateReservationAsyncWithHttpInfo($booking_id, $reservation_id, $authorization, $http_reservation_update_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation updateReservationAsyncWithHttpInfo.
     *
     * Update a reservation
     *
     * @param string                                      $booking_id                      The id of the booking (required)
     * @param string                                      $reservation_id                  The id of the reservation (required)
     * @param string                                      $authorization                   Type &#39;Bearer&#39; and then your API Token (required)
     * @param \Katanox\Model\HttpReservationUpdateRequest $http_reservation_update_request The reservation body (required)
     * @param string                                      $contentType                     The value for the Content-Type header. Check self::contentTypes['updateReservation'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *
     * @throws InvalidArgumentException
     */
    public function updateReservationAsyncWithHttpInfo($booking_id, $reservation_id, $authorization, $http_reservation_update_request, string $contentType = self::contentTypes['updateReservation'][0])
    {
        $returnType = '\Katanox\Model\HttpReservationResponse';
        $request = $this->updateReservationRequest($booking_id, $reservation_id, $authorization, $http_reservation_update_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'updateReservation'.
     *
     * @param string                                      $booking_id                      The id of the booking (required)
     * @param string                                      $reservation_id                  The id of the reservation (required)
     * @param string                                      $authorization                   Type &#39;Bearer&#39; and then your API Token (required)
     * @param \Katanox\Model\HttpReservationUpdateRequest $http_reservation_update_request The reservation body (required)
     * @param string                                      $contentType                     The value for the Content-Type header. Check self::contentTypes['updateReservation'] to see the possible values for this operation
     *
     * @return \GuzzleHttp\Psr7\Request
     *
     * @throws InvalidArgumentException
     */
    public function updateReservationRequest($booking_id, $reservation_id, $authorization, $http_reservation_update_request, string $contentType = self::contentTypes['updateReservation'][0])
    {
        // verify the required parameter 'booking_id' is set
        if (null === $booking_id || (is_array($booking_id) && 0 === count($booking_id))) {
            throw new InvalidArgumentException(
                'Missing the required parameter $booking_id when calling updateReservation'
            );
        }

        // verify the required parameter 'reservation_id' is set
        if (null === $reservation_id || (is_array($reservation_id) && 0 === count($reservation_id))) {
            throw new InvalidArgumentException(
                'Missing the required parameter $reservation_id when calling updateReservation'
            );
        }

        // verify the required parameter 'authorization' is set
        if (null === $authorization || (is_array($authorization) && 0 === count($authorization))) {
            throw new InvalidArgumentException(
                'Missing the required parameter $authorization when calling updateReservation'
            );
        }

        // verify the required parameter 'http_reservation_update_request' is set
        if (null === $http_reservation_update_request || (is_array($http_reservation_update_request) && 0 === count($http_reservation_update_request))) {
            throw new InvalidArgumentException(
                'Missing the required parameter $http_reservation_update_request when calling updateReservation'
            );
        }

        $resourcePath = '/bookings/{booking_id}/reservations/{reservation_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if (null !== $authorization) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if (null !== $booking_id) {
            $resourcePath = str_replace(
                '{booking_id}',
                ObjectSerializer::toPathValue($booking_id),
                $resourcePath
            );
        }
        // path params
        if (null !== $reservation_id) {
            $resourcePath = str_replace(
                '{reservation_id}',
                ObjectSerializer::toPathValue($reservation_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($http_reservation_update_request)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($http_reservation_update_request));
            } else {
                $httpBody = $http_reservation_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'PUT',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option.
     *
     * @return array of http client options
     *
     * @throws RuntimeException on file opening failure
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        return $options;
    }
}
