<?php
/**
 * AvailabilityPrice.
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Katanox API Documentation.
 *
 * The Katanox API allows any travel seller to search and book accommodation.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Katanox\Model;

use ArrayAccess;
use InvalidArgumentException;
use JsonSerializable;
use Katanox\ObjectSerializer;
use ReturnTypeWillChange;

/**
 * AvailabilityPrice Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class AvailabilityPrice implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'availability.Price';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'after_tax' => 'float',
        'before_tax' => 'float',
        'currency' => 'string',
        'extra_charges' => '\Katanox\Model\AvailabilityExtraCharge[]',
        'price_per_night' => '\Katanox\Model\AvailabilityPricePerNight[]',
        'total_amount' => 'float',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'after_tax' => null,
        'before_tax' => null,
        'currency' => null,
        'extra_charges' => null,
        'price_per_night' => null,
        'total_amount' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'after_tax' => false,
        'before_tax' => false,
        'currency' => false,
        'extra_charges' => false,
        'price_per_night' => false,
        'total_amount' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'after_tax' => 'after_tax',
        'before_tax' => 'before_tax',
        'currency' => 'currency',
        'extra_charges' => 'extra_charges',
        'price_per_night' => 'price_per_night',
        'total_amount' => 'total_amount',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'after_tax' => 'setAfterTax',
        'before_tax' => 'setBeforeTax',
        'currency' => 'setCurrency',
        'extra_charges' => 'setExtraCharges',
        'price_per_night' => 'setPricePerNight',
        'total_amount' => 'setTotalAmount',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'after_tax' => 'getAfterTax',
        'before_tax' => 'getBeforeTax',
        'currency' => 'getCurrency',
        'extra_charges' => 'getExtraCharges',
        'price_per_night' => 'getPricePerNight',
        'total_amount' => 'getTotalAmount',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('after_tax', $data ?? [], null);
        $this->setIfExists('before_tax', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('extra_charges', $data ?? [], null);
        $this->setIfExists('price_per_night', $data ?? [], null);
        $this->setIfExists('total_amount', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets after_tax.
     *
     * @return null|float
     */
    public function getAfterTax()
    {
        return $this->container['after_tax'];
    }

    /**
     * Sets after_tax.
     *
     * @param null|float $after_tax after_tax
     *
     * @return self
     */
    public function setAfterTax($after_tax)
    {
        if (is_null($after_tax)) {
            throw new InvalidArgumentException('non-nullable after_tax cannot be null');
        }
        $this->container['after_tax'] = $after_tax;

        return $this;
    }

    /**
     * Gets before_tax.
     *
     * @return null|float
     */
    public function getBeforeTax()
    {
        return $this->container['before_tax'];
    }

    /**
     * Sets before_tax.
     *
     * @param null|float $before_tax before_tax
     *
     * @return self
     */
    public function setBeforeTax($before_tax)
    {
        if (is_null($before_tax)) {
            throw new InvalidArgumentException('non-nullable before_tax cannot be null');
        }
        $this->container['before_tax'] = $before_tax;

        return $this;
    }

    /**
     * Gets currency.
     *
     * @return null|string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency.
     *
     * @param null|string $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets extra_charges.
     *
     * @return null|\Katanox\Model\AvailabilityExtraCharge[]
     */
    public function getExtraCharges()
    {
        return $this->container['extra_charges'];
    }

    /**
     * Sets extra_charges.
     *
     * @param null|\Katanox\Model\AvailabilityExtraCharge[] $extra_charges extra_charges
     *
     * @return self
     */
    public function setExtraCharges($extra_charges)
    {
        if (is_null($extra_charges)) {
            throw new InvalidArgumentException('non-nullable extra_charges cannot be null');
        }
        $this->container['extra_charges'] = $extra_charges;

        return $this;
    }

    /**
     * Gets price_per_night.
     *
     * @return null|\Katanox\Model\AvailabilityPricePerNight[]
     */
    public function getPricePerNight()
    {
        return $this->container['price_per_night'];
    }

    /**
     * Sets price_per_night.
     *
     * @param null|\Katanox\Model\AvailabilityPricePerNight[] $price_per_night price_per_night
     *
     * @return self
     */
    public function setPricePerNight($price_per_night)
    {
        if (is_null($price_per_night)) {
            throw new InvalidArgumentException('non-nullable price_per_night cannot be null');
        }
        $this->container['price_per_night'] = $price_per_night;

        return $this;
    }

    /**
     * Gets total_amount.
     *
     * @return null|float
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount.
     *
     * @param null|float $total_amount total_amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        if (is_null($total_amount)) {
            throw new InvalidArgumentException('non-nullable total_amount cannot be null');
        }
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
