<?php
/**
 * AvailabilityExternalPrice
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Katanox
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Katanox API Documentation
 *
 * The Katanox API allows any travel seller to search and book accommodation.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Katanox\Model;

use \ArrayAccess;
use \Katanox\ObjectSerializer;

/**
 * AvailabilityExternalPrice Class Doc Comment
 *
 * @category Class
 * @package  Katanox
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AvailabilityExternalPrice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'availability.ExternalPrice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'after_tax' => 'float',
        'before_tax' => 'float',
        'breakdown' => '\Katanox\Model\GithubComKatanoxApiPkgModelAvailabilityPricePerNight[]',
        'currency' => 'string',
        'extra_charges' => '\Katanox\Model\AvailabilityExtraCharge[]',
        'net_rate' => 'float',
        'taxes' => '\Katanox\Model\AvailabilityTaxDetail[]',
        'total_amount' => 'float',
        'total_at_property' => 'float',
        'total_before_tax' => 'float',
        'total_tax' => 'float',
        'vat' => '\Katanox\Model\AvailabilityVatDetail'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'after_tax' => null,
        'before_tax' => null,
        'breakdown' => null,
        'currency' => null,
        'extra_charges' => null,
        'net_rate' => null,
        'taxes' => null,
        'total_amount' => null,
        'total_at_property' => null,
        'total_before_tax' => null,
        'total_tax' => null,
        'vat' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'after_tax' => false,
        'before_tax' => false,
        'breakdown' => false,
        'currency' => false,
        'extra_charges' => false,
        'net_rate' => false,
        'taxes' => false,
        'total_amount' => false,
        'total_at_property' => false,
        'total_before_tax' => false,
        'total_tax' => false,
        'vat' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'after_tax' => 'after_tax',
        'before_tax' => 'before_tax',
        'breakdown' => 'breakdown',
        'currency' => 'currency',
        'extra_charges' => 'extra_charges',
        'net_rate' => 'net_rate',
        'taxes' => 'taxes',
        'total_amount' => 'total_amount',
        'total_at_property' => 'total_at_property',
        'total_before_tax' => 'total_before_tax',
        'total_tax' => 'total_tax',
        'vat' => 'vat'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'after_tax' => 'setAfterTax',
        'before_tax' => 'setBeforeTax',
        'breakdown' => 'setBreakdown',
        'currency' => 'setCurrency',
        'extra_charges' => 'setExtraCharges',
        'net_rate' => 'setNetRate',
        'taxes' => 'setTaxes',
        'total_amount' => 'setTotalAmount',
        'total_at_property' => 'setTotalAtProperty',
        'total_before_tax' => 'setTotalBeforeTax',
        'total_tax' => 'setTotalTax',
        'vat' => 'setVat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'after_tax' => 'getAfterTax',
        'before_tax' => 'getBeforeTax',
        'breakdown' => 'getBreakdown',
        'currency' => 'getCurrency',
        'extra_charges' => 'getExtraCharges',
        'net_rate' => 'getNetRate',
        'taxes' => 'getTaxes',
        'total_amount' => 'getTotalAmount',
        'total_at_property' => 'getTotalAtProperty',
        'total_before_tax' => 'getTotalBeforeTax',
        'total_tax' => 'getTotalTax',
        'vat' => 'getVat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('after_tax', $data ?? [], null);
        $this->setIfExists('before_tax', $data ?? [], null);
        $this->setIfExists('breakdown', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('extra_charges', $data ?? [], null);
        $this->setIfExists('net_rate', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
        $this->setIfExists('total_amount', $data ?? [], null);
        $this->setIfExists('total_at_property', $data ?? [], null);
        $this->setIfExists('total_before_tax', $data ?? [], null);
        $this->setIfExists('total_tax', $data ?? [], null);
        $this->setIfExists('vat', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets after_tax
     *
     * @return float|null
     */
    public function getAfterTax()
    {
        return $this->container['after_tax'];
    }

    /**
     * Sets after_tax
     *
     * @param float|null $after_tax after_tax
     *
     * @return self
     */
    public function setAfterTax($after_tax)
    {
        if (is_null($after_tax)) {
            throw new \InvalidArgumentException('non-nullable after_tax cannot be null');
        }
        $this->container['after_tax'] = $after_tax;

        return $this;
    }

    /**
     * Gets before_tax
     *
     * @return float|null
     */
    public function getBeforeTax()
    {
        return $this->container['before_tax'];
    }

    /**
     * Sets before_tax
     *
     * @param float|null $before_tax before_tax
     *
     * @return self
     */
    public function setBeforeTax($before_tax)
    {
        if (is_null($before_tax)) {
            throw new \InvalidArgumentException('non-nullable before_tax cannot be null');
        }
        $this->container['before_tax'] = $before_tax;

        return $this;
    }

    /**
     * Gets breakdown
     *
     * @return \Katanox\Model\GithubComKatanoxApiPkgModelAvailabilityPricePerNight[]|null
     */
    public function getBreakdown()
    {
        return $this->container['breakdown'];
    }

    /**
     * Sets breakdown
     *
     * @param \Katanox\Model\GithubComKatanoxApiPkgModelAvailabilityPricePerNight[]|null $breakdown breakdown
     *
     * @return self
     */
    public function setBreakdown($breakdown)
    {
        if (is_null($breakdown)) {
            throw new \InvalidArgumentException('non-nullable breakdown cannot be null');
        }
        $this->container['breakdown'] = $breakdown;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets extra_charges
     *
     * @return \Katanox\Model\AvailabilityExtraCharge[]|null
     */
    public function getExtraCharges()
    {
        return $this->container['extra_charges'];
    }

    /**
     * Sets extra_charges
     *
     * @param \Katanox\Model\AvailabilityExtraCharge[]|null $extra_charges extra_charges
     *
     * @return self
     */
    public function setExtraCharges($extra_charges)
    {
        if (is_null($extra_charges)) {
            throw new \InvalidArgumentException('non-nullable extra_charges cannot be null');
        }
        $this->container['extra_charges'] = $extra_charges;

        return $this;
    }

    /**
     * Gets net_rate
     *
     * @return float|null
     */
    public function getNetRate()
    {
        return $this->container['net_rate'];
    }

    /**
     * Sets net_rate
     *
     * @param float|null $net_rate net_rate
     *
     * @return self
     */
    public function setNetRate($net_rate)
    {
        if (is_null($net_rate)) {
            throw new \InvalidArgumentException('non-nullable net_rate cannot be null');
        }
        $this->container['net_rate'] = $net_rate;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return \Katanox\Model\AvailabilityTaxDetail[]|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param \Katanox\Model\AvailabilityTaxDetail[]|null $taxes taxes
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        if (is_null($taxes)) {
            throw new \InvalidArgumentException('non-nullable taxes cannot be null');
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return float|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param float|null $total_amount total_amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        if (is_null($total_amount)) {
            throw new \InvalidArgumentException('non-nullable total_amount cannot be null');
        }
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets total_at_property
     *
     * @return float|null
     */
    public function getTotalAtProperty()
    {
        return $this->container['total_at_property'];
    }

    /**
     * Sets total_at_property
     *
     * @param float|null $total_at_property total_at_property
     *
     * @return self
     */
    public function setTotalAtProperty($total_at_property)
    {
        if (is_null($total_at_property)) {
            throw new \InvalidArgumentException('non-nullable total_at_property cannot be null');
        }
        $this->container['total_at_property'] = $total_at_property;

        return $this;
    }

    /**
     * Gets total_before_tax
     *
     * @return float|null
     */
    public function getTotalBeforeTax()
    {
        return $this->container['total_before_tax'];
    }

    /**
     * Sets total_before_tax
     *
     * @param float|null $total_before_tax total_before_tax
     *
     * @return self
     */
    public function setTotalBeforeTax($total_before_tax)
    {
        if (is_null($total_before_tax)) {
            throw new \InvalidArgumentException('non-nullable total_before_tax cannot be null');
        }
        $this->container['total_before_tax'] = $total_before_tax;

        return $this;
    }

    /**
     * Gets total_tax
     *
     * @return float|null
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     *
     * @param float|null $total_tax total_tax
     *
     * @return self
     */
    public function setTotalTax($total_tax)
    {
        if (is_null($total_tax)) {
            throw new \InvalidArgumentException('non-nullable total_tax cannot be null');
        }
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return \Katanox\Model\AvailabilityVatDetail|null
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param \Katanox\Model\AvailabilityVatDetail|null $vat vat
     *
     * @return self
     */
    public function setVat($vat)
    {
        if (is_null($vat)) {
            throw new \InvalidArgumentException('non-nullable vat cannot be null');
        }
        $this->container['vat'] = $vat;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


