<?php
/**
 * HttpReservation.
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Katanox API Documentation.
 *
 * The Katanox API allows any travel seller to search and book accommodation.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Katanox\Model;

use ArrayAccess;
use DateTime;
use InvalidArgumentException;
use JsonSerializable;
use Katanox\ObjectSerializer;
use ReturnTypeWillChange;

/**
 * HttpReservation Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class HttpReservation implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'http.Reservation';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'adults' => 'int',
        'check_in' => '\DateTime',
        'check_out' => '\DateTime',
        'children' => 'int',
        'comments' => 'string[]',
        'guests' => '\Katanox\Model\HttpPerson[]',
        'id' => 'string',
        'price' => '\Katanox\Model\HttpPrice',
        'rate_plan_id' => 'string',
        'status' => 'string',
        'unit_id' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'adults' => null,
        'check_in' => 'date',
        'check_out' => 'date',
        'children' => null,
        'comments' => null,
        'guests' => null,
        'id' => null,
        'price' => null,
        'rate_plan_id' => null,
        'status' => null,
        'unit_id' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'adults' => false,
        'check_in' => false,
        'check_out' => false,
        'children' => false,
        'comments' => false,
        'guests' => false,
        'id' => false,
        'price' => false,
        'rate_plan_id' => false,
        'status' => false,
        'unit_id' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adults' => 'adults',
        'check_in' => 'check_in',
        'check_out' => 'check_out',
        'children' => 'children',
        'comments' => 'comments',
        'guests' => 'guests',
        'id' => 'id',
        'price' => 'price',
        'rate_plan_id' => 'rate_plan_id',
        'status' => 'status',
        'unit_id' => 'unit_id',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'adults' => 'setAdults',
        'check_in' => 'setCheckIn',
        'check_out' => 'setCheckOut',
        'children' => 'setChildren',
        'comments' => 'setComments',
        'guests' => 'setGuests',
        'id' => 'setId',
        'price' => 'setPrice',
        'rate_plan_id' => 'setRatePlanId',
        'status' => 'setStatus',
        'unit_id' => 'setUnitId',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'adults' => 'getAdults',
        'check_in' => 'getCheckIn',
        'check_out' => 'getCheckOut',
        'children' => 'getChildren',
        'comments' => 'getComments',
        'guests' => 'getGuests',
        'id' => 'getId',
        'price' => 'getPrice',
        'rate_plan_id' => 'getRatePlanId',
        'status' => 'getStatus',
        'unit_id' => 'getUnitId',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('adults', $data ?? [], null);
        $this->setIfExists('check_in', $data ?? [], null);
        $this->setIfExists('check_out', $data ?? [], null);
        $this->setIfExists('children', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('guests', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('rate_plan_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('unit_id', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets adults.
     *
     * @return null|int
     */
    public function getAdults()
    {
        return $this->container['adults'];
    }

    /**
     * Sets adults.
     *
     * @param null|int $adults adults
     *
     * @return self
     */
    public function setAdults($adults)
    {
        if (is_null($adults)) {
            throw new InvalidArgumentException('non-nullable adults cannot be null');
        }
        $this->container['adults'] = $adults;

        return $this;
    }

    /**
     * Gets check_in.
     *
     * @return null|DateTime
     */
    public function getCheckIn()
    {
        return $this->container['check_in'];
    }

    /**
     * Sets check_in.
     *
     * @param null|DateTime $check_in check_in
     *
     * @return self
     */
    public function setCheckIn($check_in)
    {
        if (is_null($check_in)) {
            throw new InvalidArgumentException('non-nullable check_in cannot be null');
        }
        $this->container['check_in'] = $check_in;

        return $this;
    }

    /**
     * Gets check_out.
     *
     * @return null|DateTime
     */
    public function getCheckOut()
    {
        return $this->container['check_out'];
    }

    /**
     * Sets check_out.
     *
     * @param null|DateTime $check_out check_out
     *
     * @return self
     */
    public function setCheckOut($check_out)
    {
        if (is_null($check_out)) {
            throw new InvalidArgumentException('non-nullable check_out cannot be null');
        }
        $this->container['check_out'] = $check_out;

        return $this;
    }

    /**
     * Gets children.
     *
     * @return null|int
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children.
     *
     * @param null|int $children children
     *
     * @return self
     */
    public function setChildren($children)
    {
        if (is_null($children)) {
            throw new InvalidArgumentException('non-nullable children cannot be null');
        }
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets comments.
     *
     * @return null|string[]
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments.
     *
     * @param null|string[] $comments comments
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets guests.
     *
     * @return null|\Katanox\Model\HttpPerson[]
     */
    public function getGuests()
    {
        return $this->container['guests'];
    }

    /**
     * Sets guests.
     *
     * @param null|\Katanox\Model\HttpPerson[] $guests guests
     *
     * @return self
     */
    public function setGuests($guests)
    {
        if (is_null($guests)) {
            throw new InvalidArgumentException('non-nullable guests cannot be null');
        }
        $this->container['guests'] = $guests;

        return $this;
    }

    /**
     * Gets id.
     *
     * @return null|string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param null|string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets price.
     *
     * @return null|\Katanox\Model\HttpPrice
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price.
     *
     * @param null|\Katanox\Model\HttpPrice $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets rate_plan_id.
     *
     * @return null|string
     */
    public function getRatePlanId()
    {
        return $this->container['rate_plan_id'];
    }

    /**
     * Sets rate_plan_id.
     *
     * @param null|string $rate_plan_id rate_plan_id
     *
     * @return self
     */
    public function setRatePlanId($rate_plan_id)
    {
        if (is_null($rate_plan_id)) {
            throw new InvalidArgumentException('non-nullable rate_plan_id cannot be null');
        }
        $this->container['rate_plan_id'] = $rate_plan_id;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return null|string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param null|string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets unit_id.
     *
     * @return null|string
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id.
     *
     * @param null|string $unit_id unit_id
     *
     * @return self
     */
    public function setUnitId($unit_id)
    {
        if (is_null($unit_id)) {
            throw new InvalidArgumentException('non-nullable unit_id cannot be null');
        }
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
