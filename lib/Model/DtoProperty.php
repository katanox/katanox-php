<?php
/**
 * DtoProperty
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Katanox
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Katanox API Documentation
 *
 * The Katanox API allows any travel seller to search and book accommodation.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Katanox\Model;

use \ArrayAccess;
use \Katanox\ObjectSerializer;

/**
 * DtoProperty Class Doc Comment
 *
 * @category Class
 * @package  Katanox
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DtoProperty implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'dto.Property';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address_line_1' => 'string',
        'address_line_2' => 'string',
        'cancellation_policies' => '\Katanox\Model\DtoCancellationPolicy[]',
        'check_in_time' => 'string',
        'check_out_time' => 'string',
        'city' => 'string',
        'country' => 'string',
        'currency' => 'string',
        'description' => 'string',
        'email' => 'string',
        'facilities' => '\Katanox\Model\DtoFacility[]',
        'id' => 'string',
        'images' => '\Katanox\Model\DtoPropertyImage[]',
        'location' => '\Katanox\Model\GeopointGeoPoint',
        'name' => 'string',
        'no_show_policies' => '\Katanox\Model\DtoNoShowPolicy[]',
        'number_of_units' => 'int',
        'phone_number' => 'string',
        'postcode' => 'string',
        'prices' => '\Katanox\Model\AvailabilityAvailabilityAndPrice[]',
        'rate_plans' => '\Katanox\Model\DtoRatePlan[]',
        'star_rating' => 'int',
        'translations' => '\Katanox\Model\DtoI18NProperty[]',
        'units' => '\Katanox\Model\DtoUnit[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address_line_1' => null,
        'address_line_2' => null,
        'cancellation_policies' => null,
        'check_in_time' => null,
        'check_out_time' => null,
        'city' => null,
        'country' => null,
        'currency' => null,
        'description' => null,
        'email' => null,
        'facilities' => null,
        'id' => null,
        'images' => null,
        'location' => null,
        'name' => null,
        'no_show_policies' => null,
        'number_of_units' => null,
        'phone_number' => null,
        'postcode' => null,
        'prices' => null,
        'rate_plans' => null,
        'star_rating' => null,
        'translations' => null,
        'units' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address_line_1' => false,
		'address_line_2' => false,
		'cancellation_policies' => false,
		'check_in_time' => false,
		'check_out_time' => false,
		'city' => false,
		'country' => false,
		'currency' => false,
		'description' => false,
		'email' => false,
		'facilities' => false,
		'id' => false,
		'images' => false,
		'location' => false,
		'name' => false,
		'no_show_policies' => false,
		'number_of_units' => false,
		'phone_number' => false,
		'postcode' => false,
		'prices' => false,
		'rate_plans' => false,
		'star_rating' => false,
		'translations' => false,
		'units' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_line_1' => 'address_line_1',
        'address_line_2' => 'address_line_2',
        'cancellation_policies' => 'cancellation_policies',
        'check_in_time' => 'check_in_time',
        'check_out_time' => 'check_out_time',
        'city' => 'city',
        'country' => 'country',
        'currency' => 'currency',
        'description' => 'description',
        'email' => 'email',
        'facilities' => 'facilities',
        'id' => 'id',
        'images' => 'images',
        'location' => 'location',
        'name' => 'name',
        'no_show_policies' => 'no_show_policies',
        'number_of_units' => 'number_of_units',
        'phone_number' => 'phone_number',
        'postcode' => 'postcode',
        'prices' => 'prices',
        'rate_plans' => 'rate_plans',
        'star_rating' => 'star_rating',
        'translations' => 'translations',
        'units' => 'units'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_line_1' => 'setAddressLine1',
        'address_line_2' => 'setAddressLine2',
        'cancellation_policies' => 'setCancellationPolicies',
        'check_in_time' => 'setCheckInTime',
        'check_out_time' => 'setCheckOutTime',
        'city' => 'setCity',
        'country' => 'setCountry',
        'currency' => 'setCurrency',
        'description' => 'setDescription',
        'email' => 'setEmail',
        'facilities' => 'setFacilities',
        'id' => 'setId',
        'images' => 'setImages',
        'location' => 'setLocation',
        'name' => 'setName',
        'no_show_policies' => 'setNoShowPolicies',
        'number_of_units' => 'setNumberOfUnits',
        'phone_number' => 'setPhoneNumber',
        'postcode' => 'setPostcode',
        'prices' => 'setPrices',
        'rate_plans' => 'setRatePlans',
        'star_rating' => 'setStarRating',
        'translations' => 'setTranslations',
        'units' => 'setUnits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_line_1' => 'getAddressLine1',
        'address_line_2' => 'getAddressLine2',
        'cancellation_policies' => 'getCancellationPolicies',
        'check_in_time' => 'getCheckInTime',
        'check_out_time' => 'getCheckOutTime',
        'city' => 'getCity',
        'country' => 'getCountry',
        'currency' => 'getCurrency',
        'description' => 'getDescription',
        'email' => 'getEmail',
        'facilities' => 'getFacilities',
        'id' => 'getId',
        'images' => 'getImages',
        'location' => 'getLocation',
        'name' => 'getName',
        'no_show_policies' => 'getNoShowPolicies',
        'number_of_units' => 'getNumberOfUnits',
        'phone_number' => 'getPhoneNumber',
        'postcode' => 'getPostcode',
        'prices' => 'getPrices',
        'rate_plans' => 'getRatePlans',
        'star_rating' => 'getStarRating',
        'translations' => 'getTranslations',
        'units' => 'getUnits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('address_line_1', $data ?? [], null);
        $this->setIfExists('address_line_2', $data ?? [], null);
        $this->setIfExists('cancellation_policies', $data ?? [], null);
        $this->setIfExists('check_in_time', $data ?? [], null);
        $this->setIfExists('check_out_time', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('facilities', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('no_show_policies', $data ?? [], null);
        $this->setIfExists('number_of_units', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('postcode', $data ?? [], null);
        $this->setIfExists('prices', $data ?? [], null);
        $this->setIfExists('rate_plans', $data ?? [], null);
        $this->setIfExists('star_rating', $data ?? [], null);
        $this->setIfExists('translations', $data ?? [], null);
        $this->setIfExists('units', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_line_1
     *
     * @return string|null
     */
    public function getAddressLine1()
    {
        return $this->container['address_line_1'];
    }

    /**
     * Sets address_line_1
     *
     * @param string|null $address_line_1 address_line_1
     *
     * @return self
     */
    public function setAddressLine1($address_line_1)
    {
        if (is_null($address_line_1)) {
            throw new \InvalidArgumentException('non-nullable address_line_1 cannot be null');
        }
        $this->container['address_line_1'] = $address_line_1;

        return $this;
    }

    /**
     * Gets address_line_2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['address_line_2'];
    }

    /**
     * Sets address_line_2
     *
     * @param string|null $address_line_2 address_line_2
     *
     * @return self
     */
    public function setAddressLine2($address_line_2)
    {
        if (is_null($address_line_2)) {
            throw new \InvalidArgumentException('non-nullable address_line_2 cannot be null');
        }
        $this->container['address_line_2'] = $address_line_2;

        return $this;
    }

    /**
     * Gets cancellation_policies
     *
     * @return \Katanox\Model\DtoCancellationPolicy[]|null
     */
    public function getCancellationPolicies()
    {
        return $this->container['cancellation_policies'];
    }

    /**
     * Sets cancellation_policies
     *
     * @param \Katanox\Model\DtoCancellationPolicy[]|null $cancellation_policies cancellation_policies
     *
     * @return self
     */
    public function setCancellationPolicies($cancellation_policies)
    {
        if (is_null($cancellation_policies)) {
            throw new \InvalidArgumentException('non-nullable cancellation_policies cannot be null');
        }
        $this->container['cancellation_policies'] = $cancellation_policies;

        return $this;
    }

    /**
     * Gets check_in_time
     *
     * @return string|null
     */
    public function getCheckInTime()
    {
        return $this->container['check_in_time'];
    }

    /**
     * Sets check_in_time
     *
     * @param string|null $check_in_time check_in_time
     *
     * @return self
     */
    public function setCheckInTime($check_in_time)
    {
        if (is_null($check_in_time)) {
            throw new \InvalidArgumentException('non-nullable check_in_time cannot be null');
        }
        $this->container['check_in_time'] = $check_in_time;

        return $this;
    }

    /**
     * Gets check_out_time
     *
     * @return string|null
     */
    public function getCheckOutTime()
    {
        return $this->container['check_out_time'];
    }

    /**
     * Sets check_out_time
     *
     * @param string|null $check_out_time check_out_time
     *
     * @return self
     */
    public function setCheckOutTime($check_out_time)
    {
        if (is_null($check_out_time)) {
            throw new \InvalidArgumentException('non-nullable check_out_time cannot be null');
        }
        $this->container['check_out_time'] = $check_out_time;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets facilities
     *
     * @return \Katanox\Model\DtoFacility[]|null
     */
    public function getFacilities()
    {
        return $this->container['facilities'];
    }

    /**
     * Sets facilities
     *
     * @param \Katanox\Model\DtoFacility[]|null $facilities facilities
     *
     * @return self
     */
    public function setFacilities($facilities)
    {
        if (is_null($facilities)) {
            throw new \InvalidArgumentException('non-nullable facilities cannot be null');
        }
        $this->container['facilities'] = $facilities;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \Katanox\Model\DtoPropertyImage[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \Katanox\Model\DtoPropertyImage[]|null $images images
     *
     * @return self
     */
    public function setImages($images)
    {
        if (is_null($images)) {
            throw new \InvalidArgumentException('non-nullable images cannot be null');
        }
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Katanox\Model\GeopointGeoPoint|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Katanox\Model\GeopointGeoPoint|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets no_show_policies
     *
     * @return \Katanox\Model\DtoNoShowPolicy[]|null
     */
    public function getNoShowPolicies()
    {
        return $this->container['no_show_policies'];
    }

    /**
     * Sets no_show_policies
     *
     * @param \Katanox\Model\DtoNoShowPolicy[]|null $no_show_policies no_show_policies
     *
     * @return self
     */
    public function setNoShowPolicies($no_show_policies)
    {
        if (is_null($no_show_policies)) {
            throw new \InvalidArgumentException('non-nullable no_show_policies cannot be null');
        }
        $this->container['no_show_policies'] = $no_show_policies;

        return $this;
    }

    /**
     * Gets number_of_units
     *
     * @return int|null
     */
    public function getNumberOfUnits()
    {
        return $this->container['number_of_units'];
    }

    /**
     * Sets number_of_units
     *
     * @param int|null $number_of_units number_of_units
     *
     * @return self
     */
    public function setNumberOfUnits($number_of_units)
    {
        if (is_null($number_of_units)) {
            throw new \InvalidArgumentException('non-nullable number_of_units cannot be null');
        }
        $this->container['number_of_units'] = $number_of_units;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string|null
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string|null $postcode postcode
     *
     * @return self
     */
    public function setPostcode($postcode)
    {
        if (is_null($postcode)) {
            throw new \InvalidArgumentException('non-nullable postcode cannot be null');
        }
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets prices
     *
     * @return \Katanox\Model\AvailabilityAvailabilityAndPrice[]|null
     */
    public function getPrices()
    {
        return $this->container['prices'];
    }

    /**
     * Sets prices
     *
     * @param \Katanox\Model\AvailabilityAvailabilityAndPrice[]|null $prices prices
     *
     * @return self
     */
    public function setPrices($prices)
    {
        if (is_null($prices)) {
            throw new \InvalidArgumentException('non-nullable prices cannot be null');
        }
        $this->container['prices'] = $prices;

        return $this;
    }

    /**
     * Gets rate_plans
     *
     * @return \Katanox\Model\DtoRatePlan[]|null
     */
    public function getRatePlans()
    {
        return $this->container['rate_plans'];
    }

    /**
     * Sets rate_plans
     *
     * @param \Katanox\Model\DtoRatePlan[]|null $rate_plans rate_plans
     *
     * @return self
     */
    public function setRatePlans($rate_plans)
    {
        if (is_null($rate_plans)) {
            throw new \InvalidArgumentException('non-nullable rate_plans cannot be null');
        }
        $this->container['rate_plans'] = $rate_plans;

        return $this;
    }

    /**
     * Gets star_rating
     *
     * @return int|null
     */
    public function getStarRating()
    {
        return $this->container['star_rating'];
    }

    /**
     * Sets star_rating
     *
     * @param int|null $star_rating star_rating
     *
     * @return self
     */
    public function setStarRating($star_rating)
    {
        if (is_null($star_rating)) {
            throw new \InvalidArgumentException('non-nullable star_rating cannot be null');
        }
        $this->container['star_rating'] = $star_rating;

        return $this;
    }

    /**
     * Gets translations
     *
     * @return \Katanox\Model\DtoI18NProperty[]|null
     */
    public function getTranslations()
    {
        return $this->container['translations'];
    }

    /**
     * Sets translations
     *
     * @param \Katanox\Model\DtoI18NProperty[]|null $translations translations
     *
     * @return self
     */
    public function setTranslations($translations)
    {
        if (is_null($translations)) {
            throw new \InvalidArgumentException('non-nullable translations cannot be null');
        }
        $this->container['translations'] = $translations;

        return $this;
    }

    /**
     * Gets units
     *
     * @return \Katanox\Model\DtoUnit[]|null
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param \Katanox\Model\DtoUnit[]|null $units units
     *
     * @return self
     */
    public function setUnits($units)
    {
        if (is_null($units)) {
            throw new \InvalidArgumentException('non-nullable units cannot be null');
        }
        $this->container['units'] = $units;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


